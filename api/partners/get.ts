/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Partner Service REST APIs
 * Partner Service REST APIs Documentation
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  EcomPartner,
  GetEcomPartnerByPartnerIdParams,
  GetPartnerByNameParams,
  Partner
} from './types'
import { customInstance } from '../../custom-instance';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;



/**
 * @summary Retrieve a Partner by name
 */
export const getPartnerByName = (
    params: GetPartnerByNameParams,
 ) => {
      
      
      return customInstance<Partner>(
      {url: `/api/partners`, method: 'get',
        params
    },
      );
    }
  

export const getGetPartnerByNameQueryKey = (params: GetPartnerByNameParams,) => {
    
    return [`/api/partners`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPartnerByNameQueryOptions = <TData = Awaited<ReturnType<typeof getPartnerByName>>, TError = void>(params: GetPartnerByNameParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPartnerByName>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPartnerByNameQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPartnerByName>>> = () => getPartnerByName(params, );

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPartnerByName>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPartnerByNameQueryResult = NonNullable<Awaited<ReturnType<typeof getPartnerByName>>>
export type GetPartnerByNameQueryError = void

/**
 * @summary Retrieve a Partner by name
 */
export const useGetPartnerByName = <TData = Awaited<ReturnType<typeof getPartnerByName>>, TError = void>(
 params: GetPartnerByNameParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPartnerByName>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPartnerByNameQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Retrieve an Ecom Partner by Partner Id
 */
export const getEcomPartnerByPartnerId = (
    params: GetEcomPartnerByPartnerIdParams,
 ) => {
      
      
      return customInstance<EcomPartner>(
      {url: `/api/partners/ecom`, method: 'get',
        params
    },
      );
    }
  

export const getGetEcomPartnerByPartnerIdQueryKey = (params: GetEcomPartnerByPartnerIdParams,) => {
    
    return [`/api/partners/ecom`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEcomPartnerByPartnerIdQueryOptions = <TData = Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>, TError = void>(params: GetEcomPartnerByPartnerIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEcomPartnerByPartnerIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>> = () => getEcomPartnerByPartnerId(params, );

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetEcomPartnerByPartnerIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>>
export type GetEcomPartnerByPartnerIdQueryError = void

/**
 * @summary Retrieve an Ecom Partner by Partner Id
 */
export const useGetEcomPartnerByPartnerId = <TData = Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>, TError = void>(
 params: GetEcomPartnerByPartnerIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetEcomPartnerByPartnerIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Retrieve a Partner by Id
 */
export const getPartnerById = (
    partnerId: number,
 ) => {
      
      
      return customInstance<Partner>(
      {url: `/api/partners/${partnerId}`, method: 'get'
    },
      );
    }
  

export const getGetPartnerByIdQueryKey = (partnerId: number,) => {
    
    return [`/api/partners/${partnerId}`] as const;
    }

    
export const getGetPartnerByIdQueryOptions = <TData = Awaited<ReturnType<typeof getPartnerById>>, TError = void>(partnerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPartnerById>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPartnerByIdQueryKey(partnerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPartnerById>>> = () => getPartnerById(partnerId, );

      

      

   return  { queryKey, queryFn, enabled: !!(partnerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPartnerById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPartnerByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPartnerById>>>
export type GetPartnerByIdQueryError = void

/**
 * @summary Retrieve a Partner by Id
 */
export const useGetPartnerById = <TData = Awaited<ReturnType<typeof getPartnerById>>, TError = void>(
 partnerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPartnerById>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPartnerByIdQueryOptions(partnerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



