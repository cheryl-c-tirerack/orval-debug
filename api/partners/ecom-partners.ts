/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Partner Service REST APIs
 * Partner Service REST APIs Documentation
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  EcomPartner,
  GetEcomPartnerByPartnerIdParams
} from './types'
import { customInstance } from '../../custom-instance';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;



/**
 * @summary Retrieve an Ecom Partner by Partner Id
 */
export const getEcomPartnerByPartnerId = (
    params: GetEcomPartnerByPartnerIdParams,
 ) => {
      
      
      return customInstance<EcomPartner>(
      {url: `/api/partners/ecom`, method: 'get',
        params
    },
      );
    }
  

export const getGetEcomPartnerByPartnerIdQueryKey = (params: GetEcomPartnerByPartnerIdParams,) => {
    
    return [`/api/partners/ecom`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEcomPartnerByPartnerIdQueryOptions = <TData = Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>, TError = void>(params: GetEcomPartnerByPartnerIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEcomPartnerByPartnerIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>> = () => getEcomPartnerByPartnerId(params, );

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetEcomPartnerByPartnerIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>>
export type GetEcomPartnerByPartnerIdQueryError = void

/**
 * @summary Retrieve an Ecom Partner by Partner Id
 */
export const useGetEcomPartnerByPartnerId = <TData = Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>, TError = void>(
 params: GetEcomPartnerByPartnerIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getEcomPartnerByPartnerId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetEcomPartnerByPartnerIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create an Ecom Partner
 */
export const createEcomPartner = (
    ecomPartner: EcomPartner,
 ) => {
      
      
      return customInstance<EcomPartner>(
      {url: `/api/partners/ecom`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: ecomPartner
    },
      );
    }
  


export const getCreateEcomPartnerMutationOptions = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEcomPartner>>, TError,{data: EcomPartner}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createEcomPartner>>, TError,{data: EcomPartner}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createEcomPartner>>, {data: EcomPartner}> = (props) => {
          const {data} = props ?? {};

          return  createEcomPartner(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CreateEcomPartnerMutationResult = NonNullable<Awaited<ReturnType<typeof createEcomPartner>>>
    export type CreateEcomPartnerMutationBody = EcomPartner
    export type CreateEcomPartnerMutationError = unknown

    /**
 * @summary Create an Ecom Partner
 */
export const useCreateEcomPartner = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEcomPartner>>, TError,{data: EcomPartner}, TContext>, }
) => {

      const mutationOptions = getCreateEcomPartnerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    