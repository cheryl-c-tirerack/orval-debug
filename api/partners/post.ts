/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Partner Service REST APIs
 * Partner Service REST APIs Documentation
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions
} from '@tanstack/react-query'
import type {
  DeletePartnerByIdParams,
  EcomPartner,
  Partner
} from './types'
import { customInstance } from '../../custom-instance';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;



/**
 * @summary Create a Partner
 */
export const createPartner = (
    partner: Partner,
 ) => {
      
      
      return customInstance<Partner>(
      {url: `/api/partners`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: partner
    },
      );
    }
  


export const getCreatePartnerMutationOptions = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPartner>>, TError,{data: Partner}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createPartner>>, TError,{data: Partner}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPartner>>, {data: Partner}> = (props) => {
          const {data} = props ?? {};

          return  createPartner(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CreatePartnerMutationResult = NonNullable<Awaited<ReturnType<typeof createPartner>>>
    export type CreatePartnerMutationBody = Partner
    export type CreatePartnerMutationError = unknown

    /**
 * @summary Create a Partner
 */
export const useCreatePartner = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPartner>>, TError,{data: Partner}, TContext>, }
) => {

      const mutationOptions = getCreatePartnerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete a Partner by Id
 */
export const deletePartnerById = (
    params: DeletePartnerByIdParams,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/partners`, method: 'delete',
        params
    },
      );
    }
  


export const getDeletePartnerByIdMutationOptions = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePartnerById>>, TError,{params: DeletePartnerByIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deletePartnerById>>, TError,{params: DeletePartnerByIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePartnerById>>, {params: DeletePartnerByIdParams}> = (props) => {
          const {params} = props ?? {};

          return  deletePartnerById(params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeletePartnerByIdMutationResult = NonNullable<Awaited<ReturnType<typeof deletePartnerById>>>
    
    export type DeletePartnerByIdMutationError = unknown

    /**
 * @summary Delete a Partner by Id
 */
export const useDeletePartnerById = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePartnerById>>, TError,{params: DeletePartnerByIdParams}, TContext>, }
) => {

      const mutationOptions = getDeletePartnerByIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create an Ecom Partner
 */
export const createEcomPartner = (
    ecomPartner: EcomPartner,
 ) => {
      
      
      return customInstance<EcomPartner>(
      {url: `/api/partners/ecom`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: ecomPartner
    },
      );
    }
  


export const getCreateEcomPartnerMutationOptions = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEcomPartner>>, TError,{data: EcomPartner}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createEcomPartner>>, TError,{data: EcomPartner}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createEcomPartner>>, {data: EcomPartner}> = (props) => {
          const {data} = props ?? {};

          return  createEcomPartner(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CreateEcomPartnerMutationResult = NonNullable<Awaited<ReturnType<typeof createEcomPartner>>>
    export type CreateEcomPartnerMutationBody = EcomPartner
    export type CreateEcomPartnerMutationError = unknown

    /**
 * @summary Create an Ecom Partner
 */
export const useCreateEcomPartner = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEcomPartner>>, TError,{data: EcomPartner}, TContext>, }
) => {

      const mutationOptions = getCreateEcomPartnerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    